
import telebot 
import webbrowser
from telebot import types
import sqlite3
from datetime import datetime
import os

bot = telebot.TeleBot('7988519669:AAEd2F3RaVR3ez4Vi6bWdcdu9LbV5F3pmeY')

user_data = {}

ADMIN_USER_IDS = [1892368075,706043482,980013497]


questions = [
    {"question": "–í–æ–ø—Ä–æ—Å 1: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 0},
    {"question": "–í–æ–ø—Ä–æ—Å 2: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 2},
    {"question": "–í–æ–ø—Ä–æ—Å 3: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 3},
    {"question": "–í–æ–ø—Ä–æ—Å 4: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 1},
    {"question": "–í–æ–ø—Ä–æ—Å 5: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 3},
    {"question": "–í–æ–ø—Ä–æ—Å 6: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 2},
    {"question": "–í–æ–ø—Ä–æ—Å 7: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 0},
    {"question": "–í–æ–ø—Ä–æ—Å 8: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 3},
    {"question": "–í–æ–ø—Ä–æ—Å 9: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 2},
    {"question": "–í–æ–ø—Ä–æ—Å 10: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 2},
    {"question": "–í–æ–ø—Ä–æ—Å 11: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 1},
    {"question": "–í–æ–ø—Ä–æ—Å 12: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 0},
    {"question": "–í–æ–ø—Ä–æ—Å 13: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 3},
    {"question": "–í–æ–ø—Ä–æ—Å 14: –°–æ—Å–∞–ª?", "options": ["–î–∞", "–î–∞", "–î–∞", "–î–∞"], "correct": 1},
    {"question": "–í–æ–ø—Ä–æ—Å 15: –°–∫–æ–ª—å–∫–æ?", "options": ["5", "10", "15", "20"], "correct": 0}
]

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    connection = sqlite3.connect('base.sql')
    curr = connection.cursor()
    
  
    curr.execute('''
        CREATE TABLE IF NOT EXISTS results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            name TEXT,
            score INTEGER,
            total_questions INTEGER,
            percentage REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    connection.commit()
    curr.close()
    connection.close()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""

    try:
        user_id_int = int(user_id)
    except (ValueError, TypeError):
        print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id}")
        return False
    
    is_admin_result = user_id_int in ADMIN_USER_IDS

    print(f"–û—Ç–ª–∞–¥–∫–∞ is_admin:")
    print(f"  user_id: {user_id} (—Ç–∏–ø: {type(user_id)})")
    print(f"  user_id_int: {user_id_int} (—Ç–∏–ø: {type(user_id_int)})")
    print(f"  ADMIN_USER_IDS: {ADMIN_USER_IDS}")
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_admin_result}")
    
    return is_admin_result

@bot.message_handler(commands=['start'])
def start(message):
    init_database()

    user_id = message.from_user.id
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç')
    btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ')
    
    admin_status = is_admin(user_id)
    print(f"–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user_id}: {admin_status}")
    
    if admin_status:
        btn3 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        btn4 = types.KeyboardButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç-–±–æ—Ç.', reply_markup=markup)
    else:
        markup.row(btn1, btn2)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç-–±–æ—Ç.', reply_markup=markup)

@bot.message_handler(commands=['myid'])
def show_my_id(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    
    info_message = f"""
–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
ID: {user_id}
–ò–º—è: {first_name}
–§–∞–º–∏–ª–∏—è: {last_name if last_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–≠—Ç–æ—Ç ID –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ ADMIN_USER_IDS –≤ –∫–æ–¥–µ –±–æ—Ç–∞.
–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_USER_IDS}
"""
    bot.send_message(message.chat.id, info_message)

@bot.message_handler(commands=['debug_admin'])
def debug_admin(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    admin_status = is_admin(user_id)
    
    debug_message = f"""
–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–í–∞—à ID: {user_id}
–¢–∏–ø ID: {type(user_id)}
–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_USER_IDS}
–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_status}
"""
    bot.send_message(message.chat.id, debug_message)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    text = message.text
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
    
    if user_id in user_data and user_data[user_id].get('in_test', False):
        if user_data[user_id]['current_question'] >= len(questions):
            finish_test(message.chat.id, user_id)
            return
        else:
            handle_test_answer(message)
            return
    
    if text == '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç':
        msg = bot.send_message(message.chat.id, '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(msg, process_name)
    
    elif text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ':
        markup = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://pytba.readthedocs.io/ru/latest/")
        markup.add(url_button)
        bot.send_message(
            message.chat.id,
            '–°–∞–π—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è... –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
            reply_markup=markup
        )
        start(message)
    
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':

        if is_admin(user_id):
            show_statistics(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            start(message)
    
    elif text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        if is_admin(user_id):
            confirm_clear_statistics(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            start(message)
    
    elif text == '‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        if is_admin(user_id):
            clear_statistics(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            start(message)
    
    elif text == '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(message.chat.id, "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        start(message)
    
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:")
        start(message)

def confirm_clear_statistics(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))
    markup.add(types.KeyboardButton('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'))
    
    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?",
        reply_markup=markup  
    )

def clear_statistics(message):
    try:
        connection = sqlite3.connect('base.sql')
        curr = connection.cursor()
        
    
        curr.execute('SELECT COUNT(*) FROM results')
        count_before = curr.fetchone()[0]
        
    
        curr.execute('DELETE FROM results')
        connection.commit()
        
        curr.close()
        connection.close()
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count_before}\n\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        )
        
        start(message)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(
            message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{str(e)}"
        )
        start(message)  

def show_statistics(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    connection = sqlite3.connect('base.sql')
    curr = connection.cursor()
    
    # 
    curr.execute('SELECT COUNT(*) as total_users, AVG(score) as avg_score, MAX(score) as max_score FROM results')
    stats = curr.fetchone()
    
    
    curr.execute('SELECT name, score, total_questions, timestamp FROM results ORDER BY timestamp DESC LIMIT 10')
    recent_results = curr.fetchall()
    

    curr.execute('SELECT name, score, total_questions FROM results ORDER BY score DESC LIMIT 5')
    top_results = curr.fetchall()
    
    curr.close()
    connection.close()
    
    if not stats or not stats[0]: 
        bot.send_message(message.chat.id, "üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        start(message)
        return
    
    total_users, avg_score, max_score = stats
    
    stats_message = f"""
üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê:

üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(avg_score, 1)} –∏–∑ {len(questions)}
üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max_score} –∏–∑ {len(questions)}

üèÖ –¢–û–ü-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
"""
    
    for i, (name, score, total) in enumerate(top_results, 1):
        stats_message += f"\n{i}. {name}: {score}/{total}"
    
    stats_message += "\n\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
    
    for i, (name, score, total, timestamp) in enumerate(recent_results, 1):
        date = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
        stats_message += f"\n{i}. {name}: {score}/{total} ({date})"
    
    bot.send_message(message.chat.id, stats_message)
    start(message)

def process_name(message):
    name = message.text.strip()
    user_id = message.from_user.id
    

    user_data[user_id] = {
        'name': name,
        'score': 0,
        'current_question': 0,
        'answers': [],
        'in_test': True
    }
    
    ask_question(message.chat.id, user_id)

def ask_question(chat_id, user_id):
    current_question_index = user_data[user_id]['current_question']
    
    if current_question_index < len(questions):
        question_data = questions[current_question_index]
        

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for option in question_data['options']:
            markup.add(types.KeyboardButton(option))
        
        bot.send_message(
            chat_id, 
            question_data['question'], 
            reply_markup=markup
        )
    else:

        finish_test(chat_id, user_id)

def handle_test_answer(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    

    if user_id not in user_data:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        start(message)
        return
    
    current_question_index = user_data[user_id]['current_question']
    

    if current_question_index >= len(questions):
        finish_test(message.chat.id, user_id)
        return
    
    question_data = questions[current_question_index]
    user_answer = message.text
    

    if user_answer == question_data['options'][question_data['correct']]:
        user_data[user_id]['score'] += 1
    

    user_data[user_id]['answers'].append({
        'question': question_data['question'],
        'user_answer': user_answer,
        'correct_answer': question_data['options'][question_data['correct']]
    })
    user_data[user_id]['current_question'] += 1
    ask_question(message.chat.id, user_id)

def finish_test(chat_id, user_id):

    if user_id not in user_data:
        bot.send_message(chat_id, "–¢–µ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞.")
        start_by_chat_id(chat_id, user_id)
        return
        
    name = user_data[user_id]['name']
    score = user_data[user_id]['score']
    total_questions = len(questions)
    percentage = round((score/total_questions)*100, 2)
    

    try:
        user_info = bot.get_chat(user_id)
        username = user_info.username if user_info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        first_name = user_info.first_name if user_info.first_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = user_info.last_name if user_info.last_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    except:
        username = "–ù–µ —É–∫–∞–∑–∞–Ω"
        first_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    

    connection = sqlite3.connect('base.sql')
    curr = connection.cursor()
    curr.execute(
        '''INSERT INTO results 
        (user_id, username, first_name, last_name, name, score, total_questions, percentage) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
        (user_id, username, first_name, last_name, name, score, total_questions, percentage)
    )
    connection.commit()
    curr.close()
    connection.close()
    
    result_message = f"""
üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

üë§ –ò–º—è: {name}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage}%

{'üéØ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if score >= 12 else 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if score >= 8 else 'üí™ –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!'}

–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑?
"""
    
    bot.send_message(chat_id, result_message)
    
    if user_id in user_data:
        del user_data[user_id]
    

    start_by_chat_id(chat_id, user_id)

def start_by_chat_id(chat_id, user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç')
    btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ')
    
    admin_status = is_admin(user_id)
    
    if admin_status:
        btn3 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        btn4 = types.KeyboardButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)
    else:
        markup.row(btn1, btn2)
        bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_USER_IDS}")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /myid –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug_admin –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    bot.infinity_polling()